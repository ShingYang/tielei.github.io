---
layout: post
category: "ios"
title: "苹果IAP开发中的那些坑和掉单问题"
date: 2016-03-20 19:09:00 +0800
published: true
---

相信很多iOS App的开发者，特别是手游开发者，都接触过苹果支付IAP（[In-App Purchase](https://developer.apple.com/library/ios/documentation/NetworkingInternet/Conceptual/StoreKitGuide/Introduction.html){:target="_blank"}）。相信使用了IAP的App，都经历过“掉单”问题。

什么是“掉单”呢？简言之就是用户付款买金币，钱扣了，金币却没到账。

掉单一旦发生，用户通常会很愤怒地来找客服。然后客服只能找开发人员把金币给用户手动加上。

<!--more-->

显然，伤害用户的体验，特别是伤害付费用户的体验，是一件相当糟糕的事情。

我们在[微爱](http://welove520.com){:target="_blank"}App的开发过程中，IAP支付的掉单问题也困扰了我们很久。直到去年第四季度的一次优化，才算是彻底解决了掉单问题。

掉单是如何产生的呢？这需要从IAP支付的技术流程说起。

IAP同国内的支付宝、微信支付都是用于支付的平台接口，但它们在支付的技术流程上却有着本质的不同。

支付宝和微信支付在支付流程上非常相似，如果忽略掉它们之间的细微差别，那么它们的支付流程大体上可以按如下描述：

1. 第三方App在前端发起支付请求；
2. 前端跳转到支付宝（微信）客户端，用户完成支付；
3. 前端跳回第三方App；
4. 在第3步的同时支付宝（微信）服务器回调第三方App的服务器，在这个回调中第三方App服务器完成订单验证和发货操作（给用户加金币）。

而IAP的支付流程完全不同，每次支付行为都被作为一个事务去执行：

1. App调用IAP接口在前端发起支付请求，用户在前端完成支付；
2. 用户完成后在前端回调App；
3. 如果App是一个纯客户端应用（没有服务器，比如单机手游），那么App取到票据（receipt），然后直接在前端进行验证。如果验证成功则立即在前端完成发货，并结束支付事务。支付流程到此结束。
4. 如果App有服务器，那么它需要将票据（receipt）传给App服务器。
5. App服务器将receipt发给苹果App Store服务器去验证。如果验证成功，App服务器完成发货。

那么在上述流程中，可能发生掉单的环节是哪些呢？

在支付宝和微信支付中，如果第4步回调发生错误（比如网络超时、App服务器处理异常），那么就会发生掉单。在前3步，用户已被扣款，但由于回调错误而没有给用户发货。在这个流程中，防止掉单的措施主要是支付宝和微信支付服务器在检测到回调发生失败后，会再次重试回调。通常重试间隔会越来越大，并设定一个最大的重试次数。

失败不可避免。
